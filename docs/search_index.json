[["documentation-why-its-worth-the-effort.html", "Chapter 2 Documentation: Why it’s worth the effort! 2.1 The context of bioinformatics tool development 2.2 Bioinformatics and usability 2.3 Why documentation is worth the time", " Chapter 2 Documentation: Why it’s worth the effort! 2.1 The context of bioinformatics tool development Tool development is an exciting but long process – filled with lots of careful programming, tedious troubleshooting, but also ‘Aha’ moments that ultimately can result in an amazing product that you should be proud of! Tina the Tool developer, perhaps like you, has just gotten her product working well and many of the bugs have been sorted out. Tina’s awesome tool is working exactly as designed and Tina is excited to get her tool out there to be used by the community! 1 This is indeed cause for celebration! Perhaps researchers like Uri the Tool User will come across Tina’s awesome tool and share in Tina’s enthusiasm for the project! Tina’s bioinformatics tool may be just what they were needing for their research project! Uri the Tool User can’t wait to apply Tina’s awesome tool to their project! But, it may not be long before Uri encounters errors, or questions about Tina’s awesome tool, no matter how high quality Tina’s programming of the tool is. Often users like Uri, particularly in the biology and cancer fields, have little to no programming experience. Even if a user does have programming experience, they are still unfamiliar with how Tina has set up tool. The tool may even be working exactly according to Tina’s vision but if users like Uri do not understand Tina’s vision or basic programming principles that Tina might take for granted, it can lead to a lot of frustration and time inefficiently spent. If the tool’s documentation is non-existent, scarce, out-of-date, or filled with too much jargon, the chances that Uri will be able to successfully and efficiently create a product with the tool is drastically diminished. Lack of usability often leads users to ditch even the most well-programmed of tools. This is the unfortunate and all-too-common result of many bioinformatics tools. 2.2 Bioinformatics and usability The lack of focus and education on usability in the bioinformatics tool development is not only a disservice to progress of cancer research, but also to the tool developers themselves who have equally spent uncountable work hours and effort on the development of cancer tools. We know that bioinformatics tool development doesn’t occur in a vaccuum. User designers in the field of bioinformatics have commented on reasons why documentation and usability sometimes suffer for bioinformatics tools: Problem 1) Tools developed in academia are often left to deprecate after publication because novelty is often prioritized over long-term maintenance and usability (Mangul et al. 2019). Problem 2) Bioinformatics tool development teams generally don’t have the resources to hire user-centered design experts and the small and specialized user communities are often overbooked and not incentivized to give feedback (Pavelin et al. 2012). Problem 3) Lack of resources/education about usability specific to bioinformatics tool developing communities (Pavelin et al. 2012). Unfortunately this specific course cannot address issues 1 and 2, but will attempt to help with problem 3. 2.3 Why documentation is worth the time We realize many tool developers feel unenthused about the process of creating documentation. The documentation process requires a different skill set from the tool development itself; meaning many developers were likely not attracted to tool development because of documentation and may not be sure how to craft good documentation (Wolf 2016). They may know its good for their tool, but they just aren’t enthused about it. We’d like to assure you that the effort for creating documentation has a high return payoff for the continued success of your tool as a whole! Returning to our cast of characters, let’s say that Tina the Tool Developer, had the time and knowledge to create awesome documentation for her tool. Uri the tool User is still likely to encounter errors and problems, but with thorough and easy-to-digest documentation, Uri is better equipped to troubleshoot these problems! They may also learn more about the features and limitations of the tool that will better guide Uri’s next steps! Being equipped with user-centered documentation, Uri is more likely to be able to reach the next steps of their research and potentially share a publishable result! Tina’s tool is now more likely to be cited in publications, or other forms of media. This rewards Uri for having used Tina’s tool, making Uri not only likely to continue to use the tool for their next projects, but Uri may also help spread the word about how great their experience with Tina’s tool was. This means that Tina may have a larger user base for her tool and will help Tina with future funding opportunities and making connections that will help her create more awesome tools! Well-documented tools help developers better maintain their code in the future because they may forget the mechanics of their tool over time. If Future Tina has to divert her time and effort to another project but then returns to do tool maintenance, documentation may help jog her memory! Thorough and easy-to-digest documentation may also help other tool developers contribute features or fix bugs in Tina’s tool. Here Colin the Contributor was able to read Tina’s awesome documentation. It not only got him excited about the tool, but allowed him to program a new feature which he sent to Tina. Now that you are hopefully energized and ready for creating documentation for your tool, let’s talk about a bit user-centered design concepts! References "],["lessons-we-should-borrow-from-user-designers.html", "Chapter 3 Lessons we should borrow from user designers 3.1 Thinking about user-centered development 3.2 Exercise: Think about the user community for your tool 3.3 General principles about user-friendliness", " Chapter 3 Lessons we should borrow from user designers 3.1 Thinking about user-centered development Creating tools that are easy to use starts with thinking about your user’s perspective. In other words, user-centered design is an exercise in applied empathy (Matos et al. 2013). This is why a common saying in user-centered design is “You are not your user”(Alexakis, n.d.). Although it may be true that you may have a lot in common with your user, this saying is based in the idea that you should not assume your user knows what you know or thinks like you do. For example, a warning message that may seem perfectly clear to you as a developer, may be a foreign language to your user. 2 As compared to yourself, your typical user may likely have a different: Educational background. Programming experience level. Set of motivations for using your tool. And most importantly your user does not know your tool like you do! You have spent many, many hours developing this tool and its unrealistic and impractical for them to spend the same number of hours with your tool that you have. Also keep in mind users are humans in a context. Humans have demands in their life distracting them, or are otherwise been working a long day, and are tired/frustrated/distracted/etc. Making your tool as easy as possible to use increases the likelihood of your user continuing to stick with your tool and even becoming an advocate for your tool to their colleagues! 3.1.1 Generalities about bioinformatics tool users On a general level, there are some characteristics we know about bioinformatic tool user communities. The typical user of bioinformatics tools are generally: Highly educated in their specific research topic. Skilled at picking up new information. Unlikely to have much experience in programming; may be uncomfortable with using command line. If they do have experience programming, it’s likely been from informal and self-taught learning. Like many professionals, likely to feel time pressure from deadlines. However, the bioinformatics user community also includes a variety of individuals with different roles and experiences. Mulder et al. (2018) described 10 user personas for bioinformatics software, all with their own skills and competencies: Physician Lab technician Ethicist Biocurator Discovery biologist/academic life science researcher Molecular life science educator Academic bioinformatics researcher Core facility scientist Bioinformatician in an academic or research infrastructure support role Bioinformatics software developer/software engineer Additionally, users may be at various stages in their education (undergraduates, graduates, postdocs, etc) and may have varying experience and time constraints. 3.2 Exercise: Think about the user community for your tool Write down what you know (or think you know) and try to identify any knowledge gaps you might have about your user community. Who is your user community? What need of theirs is addressed by your tool? What kinds of skills does your tool assume your user has (does your user community have those skills)? Keep the questions about your user community in mind and in a later chapter, we’ll go into more detail about conducting user research to address any knowledge gaps you may have about your user community. 3.3 General principles about user-friendliness While finding out about your user community is critical, there’s also principles we can discuss that are common to all users/humans. 3.3.0.1 Humans like visuals Humans are drawn to intuitive visuals. Visuals are efficient means of communication and help users absorb information better than long-winded paragraphs (though visuals need an accompanying explanation too). Sometimes this is particularly helpful for complicated concepts. For example, BEDtools (Quinlan and Hall (2010)) allows for the manipulation of genomic sequences in BED files. Some of these principles can be complicated to visualize, but the authors of BEDtools do a great job of using visuals to explain each function: Here, this figure explains how the merge function works given a particular set of ranges. 3.3.0.2 Stay away from jargon What someone considers jargon is a very relative to their own experiences. Terms that may seem like common knowledge to you may be foreign to your user. For example, something seemingly commonplace to you like TSV may not be something a user does not understands what it means. To help smooth over jargon-related barriers, spell out abbreviations the first time you mention them (e.g. ‘tab separated values (TSV)’). This doesn’t mean you have to have long winded explanations of every term, instead you can quickly link out to an article or website with information about a term you’ve used (e.g. tab separated values file (TSV)). This has the benefit of saving you and your user’s time without making your explanations too long winded. 3.3.0.3 Navigability: Make help easy to find When your user has a question in mind, it can make their experience a lot more stress-free if they can find their answer with ease. Its not always obvious to a user where you have put an answer to something, particularly if user is already frustrated; deep in the troubleshooting trenches! For these reasons, navigability is important for your tool and documentation. Quick tips for increasing your tools’ navigability: Minimize the number of clicks for finding help! – The more important a piece of information is to a users’ ability to use your tool, the more it should be in the forefront of your tool! Be consistent about where to find things. Once a user has caught on to your pattern of how you store things in your tool, don’t switch it – patterns are super helpful! Use visual cues where possible! More about user-friendly principles: Principles of User Interface Design by Porter (n.d.). Golden Rules of UI Design by Babich (2019). About intuitive layouts by Tidwell (2021). 3.3.0.4 Provide a method for users to file concerns No matter how much you have perfected your tool, it will never be perfect, especially since software deprecates over time. Because of this or other unknown unknowns, a usable tool still has a way for a user to let the developers know when something isn’t working. This might a direct and obvious break like a bug or broken link, but it could also be something more subtle that also requires your attention. We’ll discuss this in more detail in a later chapter. Now that we’ve discussed some major principles about users and design, let’s dive in to talking about how documentation can help! References "]]
