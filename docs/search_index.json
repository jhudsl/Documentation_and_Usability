[
["lessons-we-should-borrow-from-user-designers.html", "Chapter 3 Lessons we should borrow from user designers 3.1 Learning Objectives 3.2 Thinking about user-centered development 3.3 Exercise: Think about the user community for your tool 3.4 General principles about user-friendliness", " Chapter 3 Lessons we should borrow from user designers 3.1 Learning Objectives This chapter will demonstrate how to: Understand that user design is a form of empathy Learn about your user community Use visuals where possible Communicate while minimizing the impact of jargon Make tools more navigable Provide users with a method of contact 3.2 Thinking about user-centered development Creating tools that are easy to use starts with thinking about your user’s perspective. In other words, user design is an exercise in applied empathy (Matos et al. 2013). This is why a common saying in user design is “You are not your user”(Alexakis, n.d.). Although it may be true that you may have a lot in common with your user, this saying is based in the idea that you should not assume your user knows what you know or thinks like you do. For example, a warning message that may seem perfectly clear to you as a developer, may be a foreign language to your user. 1 As compared to yourself, your typical user may likely have a different: - Educational background. - Programming experience level. - Set of motivations for using your tool. And most importantly your user does not know your tool like you do! You have spent many, many hours developing this tool and its unrealistic and impractical for them to spend the same number of hours with your tool that you have. Also keep in mind users are humans in a context. Humans have demands in their life distracting them, or are otherwise been working a long day, and are tired/frustrated/distracted/etc. Making your tool as easy as possible to use increases the likelihood of your user continuing to stick with your tool and even becoming an advocate for your tool to their colleagues! 3.2.1 Generalities about bioinformatics tool users On a general level, there are some characteristics we know about bioinformatic tool user communities. The typical user of bioinformatics tools are generally: Highly educated in their specific research topic. Skilled at picking up new information. Unlikely to have much experience in programming; may be uncomfortable with using command line. If they do have experience programming, it’s likely been from informal and self-taught learning. Like many professionals, likely to feel time pressure from deadlines. However, the bioinformatics user community also includes a variety of individuals with different roles and experiences. Mulder et al. (2018) described 10 user personas for bioinformatics software, all with their own skills and competencies: Physician Lab technician Ethicist Biocurator Discovery biologist/academic life science researcher Molecular life science educator Academic bioinformatics researcher Core facility scientist Bioinformatician in an academic or research infrastructure support role Bioinformatics software developer/software engineer Additionally, users may be at various stages in their education (undergraduates, graduates, postdocs, etc) and may have varying experience and time constraints. 3.3 Exercise: Think about the user community for your tool Write down what you know (or think you know) and try to identify any knowledge gaps you might have about your user community. Who is your user community? What need of theirs is addressed by your tool? What kinds of skills does your tool assume your user has (does your user community have those skills)? TODO: Need link below Keep the questions about your user community in mind and in a later chapter, we’ll go into more detail about conducting user research to address any knowledge gaps you may have about your user community. 3.4 General principles about user-friendliness While finding out about your user community is critical, there’s also principles we can discuss that are common to all users/humans. 3.4.0.1 Humans like visuals Humans are drawn to intuitive visuals. Visuals are efficient means of communication and help users absorb information better than long-winded paragraphs (though visuals need an accompanying explanation too). Sometimes this is particularly helpful for complicated concepts. For example, BEDtools (Quinlan and Hall (2010)) allows for the manipulation of genomic sequences in BED files. Some of these principles can be complicated to visualize, but the authors of BEDtools do a great job of using visuals to explain each function: 3.4.0.2 Stay away from jargon What someone considers jargon is a very relative to their own experiences. Terms that may seem like common knowledge to you may be foreign to your user. For example, something seemingly commonplace to you like TSV may not be something a user does not understands what it means. To help smooth over jargon-related barriers, spell out abbreviations the first time you mention them (e.g. ‘tab separated values’). This doesn’t mean you have to have long winded explanations of every term, instead you can quickly link out to an article or website with information about a term you’ve used (e.g. tab separated values file (TSV)). This has the benefit of saving you and your user’s time without making your explanations too long winded. 3.4.0.3 Navigability: Make help easy to find When your user has a question in mind, it can make their experience a lot more stress-free if they can find their answer with ease. Its not always obvious to a user where you have put an answer to something, particularly if user is already frustrated; deep in the troubleshooting trenches! For these reasons, navigability is important for your tool and documentation. Quick tips for increasing your tools’ navigability: - Minimize the number of clicks for finding help! – The more important a piece of information is to a users’ ability to use your tool, the more it should be in the forefront of your tool! - Be consistent about where to find things. Once a user has caught on to your pattern of how you store things in your tool, don’t switch it – patterns are super helpful! - Use visual cues where possible! More about user-friendly principles: Principles of User Interface Design by Porter (n.d.). Golden Rules of UI Design by Babich (2019). About intuitive layouts by Tidwell (2021). 3.4.0.4 Provide a method for users to file concerns No matter how much you have perfected your tool, it will never be perfect, especially since software deprecates over time. Because of this or other unknown unknowns, a usable tool still has a way for a user to let the developers know when something isn’t working. This might a direct and obvious break like a bug or broken link, but it could also be something more subtle that also requires your attention. It may sound disappointing that a user has found a problem but this is something to be happy about! This means someone is interested and invested in using your tool! They’ve identified a way to improve your tool to make it even better! Providing a method of contact to your users doesn’t mean you need to give users your personal email. In fact, that is probably not the most practical way to keep user queries organized. Example contact method ideas: Have a link to a form for users to submit. Direct users to file a GitHub issue. Have a separate email inbox that you have a notification set up for. Have a Slack channel that you direct users to. Whatever method of contact you provide your users, just make sure its something that works for you and your team to respond to! Now that we’ve discussed some major principles about users and design, let’s dive in to talking about how documentation can help! References "],
["creating-comprehensive-reference-guides.html", "Chapter 7 Creating comprehensive reference guides 7.1 Learning Objectives 7.2 The goal of a reference guide 7.3 Characteristics of handy reference guides 7.4 Good examples of reference guides 7.5 Exercise: Create your own How-to examples!", " Chapter 7 Creating comprehensive reference guides 7.1 Learning Objectives This chapter will demonstrate how to: Understand the goals of a reference guide Describe characteristics of helpful reference guides Create a reference guide that will aid your user’s ability to interpret and utilize your tool to the next level 7.2 The goal of a reference guide Reference guides are the dictionary of your tool: they aren’t meant to be read front to back, but the best ones are easily searchable. Your user will have something in mind that they are trying to find information on – the quicker they can find it, the quicker their question can be answered. Our goal for a reference guide is to be as comprehensive, navigable, and as always clear as possible. 7.3 Characteristics of handy reference guides 7.3.1 Is easy to find As with our other documentation sections, no matter how well they are crafted, they are no use if no one can find them. 7.3.2 Data formats are described Perhaps after installation, getting data formatted correctly is one of the other very large hurdles users will need to deal with. Ideally, your tool can use a data format that is common. But the more that your tool is particular about an odd data format, the more your documentation needs to be specific about what the odd data format looks like. Including example files are helpful Send your user to any tools they can use to convert their data format 7.3.3 Is searchable Reference gudies being alphabetical is a start. If you are able to make terms searchable that’s even better, but at the very least, if your reference guide is visually easily able to be scanned, that can serve a similar function. 7.3.4 Is comprehensive All items are covered in the reference guide – every single thing. This includes all: terms functions arguments parameters defaults datasets or items included in the package buttons (in the case of a GUI) 7.3.5 All items are described in clear language 7.3.6 Entries should have a consistent format To recap: 7.4 Good examples of reference guides QIIME2 a great reference guide! Bolyen et al. (2019) cover all items and terms with lots of links to more information or related entries. Bioconductor packages have a consistent format which makes it easier for users to find once they are familiar with the format. A typical entry https://bioconductor.org/packages/3.12/bioc/html/GenomicRanges.html GSEA has great descriptions of their data formats 7.5 Exercise: Create your own How-to examples! TODO: Update instructions here. Use the template reference guide template to start your own reference guide either by using the markdown template directly, or navigating to the MkDocs repository you set up in the previous chapter. Keep in mind that if your tool’s destination is Bioconductor or Galaxy, you should see our specific guidance on those repositories’ examples. References "]
]
