[
["documentation-the-spinach-of-tool-development.html", "Chapter 2 Documentation: The spinach of tool development 2.1 Learning Objectives 2.2 The context of bioinformatics tool development", " Chapter 2 Documentation: The spinach of tool development 2.1 Learning Objectives This chapter will cover: Why documentation is helpful for both tool developers and users How documentation increases the impact and usability of your tool! 2.2 The context of bioinformatics tool development Tool development is an exciting but long process – filled with lots of careful programming, tedious troubleshooting, but also ‘Aha’ moments that ultimate can result in an amazing product that you should be proud of! Tina the Tool developer, perhaps like you, has just gotten her product to the point that it works and many of the bugs have been sorted out. Tina’s awesome tool is working exactly as designed and Tina is excited to get her tool out there to be used by the community! 1 This is indeed cause for celebration! And perhaps researchers like Uri the Tool User will come across Tina’s awesome tool and share in Tina’s enthusiasm for the project! The bioinformatics tool may be just what they were needing for their research project! Uri the Tool User can’t wait to apply Tina’s awesome tool to their project! But, it may not be long before Uri encounters errors, or questions about Tina’s awesome tool, no matter how high quality Tina’s programming of the tool is. Often users like Uri, particularly in the biology and cancer fields, have little to no programming experience. Even if a user does have programming experience, they are still unfamiliar with how Tina has set up tool. The tool may even be working exactly according to Tina’s vision but if users like Uri do not understand Tina’s vision or basic programming principles that Tina might take for granted, it can lead to a lot of frustration and time inefficiently spent. If the the tool’s documentation is non-existant, scarce, out-of-date, or filled with too much jargon, the chances that Uri the user will be able to successfully and efficiently create a product from the tool is slim to none. Lack of usability often leads users to ditch even the most well-programmed of tools. This is the unfortunate and all-too-common result of many bioinformatics tools. 2.2.1 Bioinformatics and usability The lack of focus and education on usability in the bioinformatics tool development is not only a disservice to progress of cancer research, but also to the tool developers themselves who have equally spent uncountable work hours and effort on the development of cancer tools. So why is poor documentation and usability common in bioinformatics? We know that bioinformatics tool development doesn’t occur in a vaccuum. User designers in the field of bioinformatics have commented on reasons why this is: Problem 1) Tools developed in academia are often left to deprecate after publication because novelty is often prioritized over long-term maintenance and usability []. Problem 2) Bioinformatics tools have a very small and specialized user communities that are often overbooked and not incentivized to give feedback []. Problem 3) Lack of resources/education about usability specific to bioinformatics tool developing communities []. Unfortunately this specific course cannot address issues 1 and 2, but will attempt to help with problem 3. 2.2.2 Why documentation is worth the time Tool developers often feel exhausted once it comes time to create documentation []. The documentation process requires a different skill set from the tool development itself; meaning many developers are not terribly excited about documentation and/or are not really sure how to craft good documentation []. The effort for creating documentation has a high return payoff for the continued success of a tool as a whole! Thorough and easy-to-digest documentation not only benefits the user, but the tool developer as well! But, we realize many developers are averse to documentation like some are to spinach. They may know its good for their tool, but they just aren’t enthused about it. In this course, we’d like you to view your tool as Popeye and where documentation spinach will make your tool stronger! Returning to our cast of characters, let’s say that Tina the Tool Developer, had the time and knowledge to create awesome documentation for her tool. Uri the tool User is still likely to encounter errors and problems, but with thorough and easy-to-digest documentation, Uri is better equipped to troubleshoot these problems as well as learn about the features and limitations of the tool that may better guide Uri’s next steps! Being equipped with user-cented documentation, Uri is more likely to be able to reach the next steps of their research and potentially share a publishable result. Tina’s tool is now more likely to be cited in publications, or other forms of media. This rewards Uri for having used Tina’s tool, making Uri not only likely to continue to use the tool for their next projects, but also help spread the word about how great Uri’s experience with Tina’s tool was. This means that Tina may have a larger user base for her tool and will help Tina with future funding opportunities and making connections that will help her create more awesome tools! Thorough and easy-to-digest documentation not only benefits users, but tool developers themselves! Well-documented tools help developers better maintain their code in the future because they may forget the mechanics of their tool over time. If Future Tina has to divert her time and effort to another project but then returns to do tool maintenance, documentation may help jog her memory! Thorough and easy-to-digest documentation may also help other tool developers contribute features or fix bugs in Tina’s tool. Here Colin the Contributor was able to read Tina’s awesome documentation. It not only got him excited about the tool, but allowed him to program a new feature which he sent to Tina. Now that you are hopefully energized and ready for creating documentation for your tool, let’s get into the details of what good documentation looks like! For all cartoons:\nAvataars by https://getavataaars.com/.\nIcons by https://thenounproject.com/ License CC BY-NC-ND 2.0.\nEmojis by OpenMoji License: CC BY-SA 4.0.↩︎ "]
]
