[
["index.html", "Informatics Technology for Cancer Research (ITCR): Documentation and Usability About this Course", " Informatics Technology for Cancer Research (ITCR): Documentation and Usability Candace Savonen 2021-04-14 About this Course This course is part of a series of courses for the Informatics Technology for Cancer Research (ITCR) called the Informatics Technology for Cancer Research Education Resource. This material was created by the ITCR Training Network (ITN) which is a collaborative effort of researchers around the United States to support cancer informatics and data science training through resources, technology, and events. Our courses feature tools developed by ITCR Investigators and make it easier for principal investigators, scientists, and analysts to integrate cancer informatics into their workflows. Please see our website at https://www.itcrtraining.org/ for more information. "],
["introduction.html", "Chapter 1 Introduction 1.1 Motivation", " Chapter 1 Introduction Cancer datasets are plentiful, complicated, and hold information that may be critical for the next research advancements. In order to use these data to their full potential, researchers are dependent on the specialized data tools that are continually being published and developed. Bioinformatics tools can often be unfriendly to their users, who often have little to no background in programming (Bolchini et al. 2008). The usability and quality of the documentation of a tool can be a major factor in how efficiently a researcher is able to obtain useful findings for the next steps of their research. 1.1 Motivation Increasing the usability and quality of documentation for a tool is not only helpful for the researcher users, but also for the developers themselves – the many hours of work put into the product will have a higher impact if the tool is usable by the target user community. Even the most well-programmed tool will be overlooked by the user community if there is little to no user-friendly documentation. 1.1.1 Target Audience The course is intended for cancer informatics tool developers, particularly those creating tools as a part of the Informatics Technology Cancer Research. 1.1.2 Curriculum The curriculum for this course will cover the basics of: Understanding why usability and documentation is vital Identifying your user community Building documentation and tutorials to maximize the usability of developed tools Obtaining feedback from your users The course includes a hands-on exercises with templates for building documentation and tutorials for cancer informatics tools. Individuals who take this course are encouraged to use these templates as they follow along with the course material to help increase the usability of their informatics tool. References "],
["documentation-the-spinach-of-tool-development.html", "Chapter 2 Documentation: The spinach of tool development 2.1 Learning Objectives 2.2 The context of bioinformatics tool development", " Chapter 2 Documentation: The spinach of tool development 2.1 Learning Objectives This chapter will demonstrate how to: Understand good documentation increases the impact and usability of software tools. Understand good documentation is helpful for both tool developers and users. 2.2 The context of bioinformatics tool development Tool development is an exciting but long process – filled with lots of careful programming, tedious troubleshooting, but also ‘Aha’ moments that ultimately can result in an amazing product that you should be proud of! Tina the Tool developer, perhaps like you, has just gotten her product working well and many of the bugs have been sorted out. Tina’s awesome tool is working exactly as designed and Tina is excited to get her tool out there to be used by the community! 1 This is indeed cause for celebration! Perhaps researchers like Uri the Tool User will come across Tina’s awesome tool and share in Tina’s enthusiasm for the project! Tina’s bioinformatics tool may be just what they were needing for their research project! Uri the Tool User can’t wait to apply Tina’s awesome tool to their project! But, it may not be long before Uri encounters errors, or questions about Tina’s awesome tool, no matter how high quality Tina’s programming of the tool is. Often users like Uri, particularly in the biology and cancer fields, have little to no programming experience. Even if a user does have programming experience, they are still unfamiliar with how Tina has set up tool. The tool may even be working exactly according to Tina’s vision but if users like Uri do not understand Tina’s vision or basic programming principles that Tina might take for granted, it can lead to a lot of frustration and time inefficiently spent. If the tool’s documentation is non-existent, scarce, out-of-date, or filled with too much jargon, the chances that Uri will be able to successfully and efficiently create a product with the tool is drastically diminished. Lack of usability often leads users to ditch even the most well-programmed of tools. This is the unfortunate and all-too-common result of many bioinformatics tools. 2.2.1 Bioinformatics and usability The lack of focus and education on usability in the bioinformatics tool development is not only a disservice to progress of cancer research, but also to the tool developers themselves who have equally spent uncountable work hours and effort on the development of cancer tools. We know that bioinformatics tool development doesn’t occur in a vaccuum. User designers in the field of bioinformatics have commented on reasons why documentation and usability sometimes suffer for bioinformatics tools: Problem 1) Tools developed in academia are often left to deprecate after publication because novelty is often prioritized over long-term maintenance and usability (Mangul et al. 2019). Problem 2) Bioinformatics tool development teams generally don’t have the resources to hire user design experts and the small and specialized user communities are often overbooked and not incentivized to give feedback (Pavelin et al. 2012). Problem 3) Lack of resources/education about usability specific to bioinformatics tool developing communities (Pavelin et al. 2012). Unfortunately this specific course cannot address issues 1 and 2, but will attempt to help with problem 3. 2.2.2 Why documentation is worth the time We realize many tool developers are averse to documentation like some are to spinach, feeling unenthused about the process of creating documentation. The documentation process requires a different skill set from the tool development itself; meaning many developers were likely not attracted to tool development because of documentation and may not be sure how to craft good documentation (Wolf 2016). They may know its good for their tool, but they just aren’t enthused about it. In this course, we’d like you to view your tool as Popeye and where documentation spinach will make your tool stronger! The effort for creating documentation has a high return payoff for the continued success of a tool as a whole! Returning to our cast of characters, let’s say that Tina the Tool Developer, had the time and knowledge to create awesome documentation for her tool. Uri the tool User is still likely to encounter errors and problems, but with thorough and easy-to-digest documentation, Uri is better equipped to troubleshoot these problems! They may also learn more about the features and limitations of the tool that will better guide Uri’s next steps! Being equipped with user-centered documentation, Uri is more likely to be able to reach the next steps of their research and potentially share a publishable result! Tina’s tool is now more likely to be cited in publications, or other forms of media. This rewards Uri for having used Tina’s tool, making Uri not only likely to continue to use the tool for their next projects, but Uri may also help spread the word about how great their experience with Tina’s tool was. This means that Tina may have a larger user base for her tool and will help Tina with future funding opportunities and making connections that will help her create more awesome tools! Well-documented tools help developers better maintain their code in the future because they may forget the mechanics of their tool over time. If Future Tina has to divert her time and effort to another project but then returns to do tool maintenance, documentation may help jog her memory! Thorough and easy-to-digest documentation may also help other tool developers contribute features or fix bugs in Tina’s tool. Here Colin the Contributor was able to read Tina’s awesome documentation. It not only got him excited about the tool, but allowed him to program a new feature which he sent to Tina. Now that you are hopefully energized and ready for creating documentation for your tool, let’s talk about a bit user design concepts! References "],
["lessons-we-should-borrow-from-user-designers.html", "Chapter 3 Lessons we should borrow from user designers 3.1 Learning Objectives 3.2 Thinking about user-centered development 3.3 General principles about user-friendliness", " Chapter 3 Lessons we should borrow from user designers 3.1 Learning Objectives This chapter will demonstrate how to: Understand that user design is a form of empathy Learn about your user community Use visuals where possible Communicate while minimizing the impact of jargon Make tools more navigable Provide users with a method of contact 3.2 Thinking about user-centered development Creating tools that are easy to use starts with thinking about your user’s perspective. In other words, user design is an exercise in applied empathy (Matos et al. 2013). This is why a common saying in user design is “You are not your user”(Alexakis, n.d.). Although it may be true that you may have a lot in common with your user, this saying is based in the idea that you should not assume your user knows what you know or thinks like you do. For example, a warning message that may seem perfectly clear to you as a developer, may be a foreign language to your user. 2 As compared to yourself, your typical user may likely have a different: - Educational background. - Programming experience level. - Set of motivations for using your tool. And most importantly your user does not know your tool like you do! You have spent many, many hours developing this tool and its unrealistic and impractical for them to spend the same number of hours with your tool that you have. Also keep in mind users are humans in a context. Humans have demands in their life distracting them, or are otherwise been working a long day, and are tired/frustrated/distracted/etc. Making your tool as easy as possible to use increases the likelihood of your user continuing to stick with your tool and even becoming an advocate for your tool to their colleagues! 3.2.1 Generalities about bioinformatics tool users On a general level, there are some characteristics we know about bioinformatic tool user communities. The typical user of bioinformatics tools are generally: - Highly educated in their specific research topic. - Skilled at picking up new information. - Unlikely to have much experience in programming; may be uncomfortable with using command line. - If they do have experience programming, it’s likely been from informal and self-taught learning. - Like many professionals, likely to feel time pressure from deadlines. However, the bioinformatics user community also includes a variety of individuals with different roles and experiences. Mulder et al. (2018) described 10 user personas for bioinformatics software, all with their own skills and competencies: Physician Lab technician Ethicist Biocurator Discovery biologist/academic life science researcher Molecular life science educator Academic bioinformatics researcher Core facility scientist Bioinformatician in an academic or research infrastructure support role Bioinformatics software developer/software engineer Additionally, users may be at various stages in their education (undergraduates, graduates, postdocs, etc) and may have varying experience and time constraints. Exercise: Think about the user community for your tool. Write down what you know (or think you know) and try to identify any knowledge gaps you might have about your user community. Who is your user community? What need of theirs is addressed by your tool? What kinds of skills does your tool assume your user has (does your user community have those skills)? TODO: Need link below Keep the questions about your user community in mind and in a later chapter, we’ll go into more detail about conducting user research to address any knowledge gaps you may have about your user community. 3.3 General principles about user-friendliness While finding out about your user community is critical, there’s also principles we can discuss that are common to all users/humans. 3.3.0.1 Humans like visuals Humans are drawn to intuitive visuals. Visuals are efficient means of communication and help users absorb information better than long-winded paragraphs (though visuals need an accompanying explanation too). Sometimes this is particularly helpful for complicated concepts. For example, BEDtools (Quinlan and Hall (2010)) allows for the manipulation of genomic sequences in BED files. Some of these principles can be complicated to visualize, but the authors of BEDtools do a great job of using visuals to explain each function: 3.3.0.2 Stay away from jargon What someone considers jargon is a very relative to their own experiences. Terms that may seem like common knowledge to you may be foreign to your user. For example, something seemingly commonplace to you like TSV may not be something a user does not understands what it means. To help smooth over jargon-related barriers, spell out abbreviations the first time you mention them (e.g. ‘tab separated values’). This doesn’t mean you have to have long winded explanations of every term, instead you can quickly link out to an article or website with information about a term you’ve used (e.g. tab separated values file (TSV)). This has the benefit of saving you and your user’s time without making your explanations too long winded. 3.3.0.3 Navigability: Make help easy to find When your user has a question in mind, it can make their experience a lot more stress-free if they can find their answer with ease. Its not always obvious to a user where you have put an answer to something, particularly if user is already frustrated; deep in the troubleshooting trenches! For these reasons, navigability is important for your tool and documentation. Quick tips for increasing your tools’ navigability: - Minimize the number of clicks for finding help! – The more important a piece of information is to a users’ ability to use your tool, the more it should be in the forefront of your tool! - Be consistent about where to find things. Once a user has caught on to your pattern of how you store things in your tool, don’t switch it – patterns are super helpful! - Use visual cues where possible! More about user-friendly principles: Principles of User Interface Design by Porter (n.d.). Golden Rules of UI Design by Babich (2019). About intuitive layouts by Tidwell (2021). 3.3.0.4 Provide a method for users to file concerns No matter how much you have perfected your tool, it will never be perfect, especially since software deprecates over time. Because of this or other unknown unknowns, a usable tool still has a way for a user to let the developers know when something isn’t working. This might a direct and obvious break like a bug or broken link, but it could also be something more subtle that also requires your attention. It may sound disappointing that a user has found a problem but this is something to be happy about! This means someone is interested and invested in using your tool! They’ve identified a way to improve your tool to make it even better! Providing a method of contact to your users doesn’t mean you need to give users your personal email. In fact, that is probably not the most practical way to keep user queries organized. Example contact methods: - Have a link to a form for users to submit. - Direct users to file a GitHub issue. - Have a separate email inbox that you have a notification set up for. - Have a Slack channel that you direct users to. Whatever method of contact you provide your users, just make sure its something that works for you and your team to respond to! Now that we’ve discussed some major principles about users and design, let’s dive in to talking about how documentation can help! References "],
["what-does-good-documentation-look-like.html", "Chapter 4 What does good documentation look like? 4.1 Learning Objectives 4.2 Major components of good documentation 4.3 The documentation templates for this course 4.4 How to use the templates folder", " Chapter 4 What does good documentation look like? 4.1 Learning Objectives This chapter will demonstrate how to: Identify major components common to good documentation Describe the purposes of components of good documentation 4.2 Major components of good documentation In this chapter we are going to cover the major aspects of a well-documented tool. In the subsequent chapters, we will talk about each of these components in more detail; providing relevant examples and tools. 3 4.2.1 The ‘Why’ Before we get into the technical information in your documentation, the first thing that should be obvious to your user is why they should want to use your tool! What need of your users does your tool fulfill? If this is not glaringly obvious, users will move on without realizing how valuable your tool could be for their research! 4.2.1.1 Exercise: Write the why of your tool! This should be the first thing your user sees on the main page of your tool. If it currently is not clear, take this time to workshop one or two sentences that explain the ‘why’ of your tool. As you craft this sentence, think about the needs of your user and how to summarize your tool’s purpose in a brief, punchy way. Stay away from jargon unless perhaps its jargon that you know your user will understand. Examples of tools with their why’s well-stated prominently on their web page: Gene Set Enrichment Analysis (GSEA) is a computational method that determines whether an a priori defined set of genes shows statistically significant, concordant differences between two biological states (e.g. phenotypes). GSEA Salmon is a tool for wicked-fast transcript quantification from RNA-seq data. It requires a set of target transcripts (either from a reference or de-novo assembly) to quantify. Salmon 4.2.2 Getting started A Getting Started section will tell a new user the exact steps they need to “get started” – no extra steps or long-winded explanations. It will in the fewest but most exact steps as possible, tell the user how to: - Install the tool and any of its dependencies. - Run the most basic analysis with the tool. - Obtain some quick result. It’s crucial that the steps here are simple and easy to follow or you risk losing new users before they even get going. 4.2.3 How-to examples A set of How-to examples will demonstrate step-by-step the most common uses after they have completed the Getting Started steps. - Every step is specifically provided by code (or by screenshots in the case of a GUI). - Any data needed to run the example is provided. - Common pitfalls and nuances of the tool that you may encounter when running the examples are explained in context. 4.2.4 Reference guides A reference guide is like a dictionary that a user can reference as questions arise. A user will likely have a specific question about a function, parameter, data type, or option and will want to be able to navigate to information about that item. Users who end up looking through your reference guide are likely a bit invested and may have already gone through the Getting Started section and/or How-to examples. All items are described in clear, non-jargon, language. The items are searchable or at least can be easily visually scanned. All options and defaults are explained and linked to more information where appropriate. 4.2.5 Code comments Comments in your source code are also a part of documentation – and likely the first part of the documentation you worked on! In most instances, if your tools is functioning fine, code will probably only be looked at by advanced and/or the most invested users. But also recall that documentation is not only for your user but for future you and existing or potential collaborators. 4.2.6 User feedback mechanism Try as you might, you will not be able to predict every scenario that a user may engage with your tool. Your user may encounter errors or quirks that you did not forsee but that would be helpful for you to know about. Your documentation should direct your users where they should send any comments or concerns. You should also make sure that this feedback method is something you can check up on and respond to regularly. 4.3 The documentation templates for this course We encourage you to create these pieces of documentation we will further discuss in the rest of this course! We have a folder of template markdown files that you can use as-is in your code repository or have them rendered nicely as a read-the-docs site. Here’s a a quick preview of this folder’s contents (which we will cover in more depth in the upcoming chapters). templates/ ├── well_documented_checklist.md ├── getting_started_template.md ├── how_to_examples_examples.md └── reference_guide_template.md 4.3.1 Well-documented checklist This document has a checklist that summarizes the major aspects that should be included in a tools’ documentation. We recommend using it to evaluate the documentation for an existing tool and identify any gaps you may need to address, or as a to-do list for creating new documentation that you can check off as you follow along with this course. 4.4 How to use the templates folder There are two options we suggest for creating documentation as you follow along with this course. Option 1) Use these template markdowns essentially as they are (after you fill them in) and add them to an existing repository. (This is the less-work option). Pros: Is easier and quicker. Cons: Is not as user-friendly as option 2. Option 2) Clone a repository with these templates and set up a MkDocs github pages site. (Slightly more work, but a very nice end result). Pros: This format of documentation sites are easy to navigate and likely familiar to your user. Cons: Will require more Github and mkdocs package knowledge to get this set up. 4.4.1 Steps for Option 1) Adding completed markdowns to an existing GitHub repository Download the folder of templates using this link Complete each markdown template, filling in the blanks as you go along with the course. File a pull request to your repository to add these files. (Optional but encouraged) Publish your repository to Github Pages. 4.4.2 Steps for Option 2) Creating a MkDocs site with Github pages 4.4.2.1 Using our template doc repository Go to our template documentation repository. Click Use this Template to get started. Fill in the template with your own information. On your computer’s command line: - git clone your new repository you made from our template. - Navigate to your the root of your local version of this repository. - Install mkdocs following their instructions.. Run mkdocs new my-project Run mkdocs serve to see a preview of your docs Edit the template pages we’ve provided in the docs/ folder. As you make changes you can run mkdocs build and then mkdocs serve to see a preview. When you are ready to publish your documentation to its own website, run mkdocs gh-deploy, it will return the web address of your new site – go to that address and bask in the success of your newly made documentation! For all cartoons:\nAvataars by https://getavataaars.com/.\nIcons by https://thenounproject.com/ License CC BY-NC-ND 2.0.\nEmojis by OpenMoji License: CC BY-SA 4.0.↩︎ "],
["about-the-authors.html", "About the Authors", " About the Authors Candace Savonen is a Research Associate in the Department of Biostatistics at the Johns Hopkins Bloomberg School of Public Health. She creates bioinformatic education materials for cancer genomics, looking for ways to emphasize reproducibility and good data science practices. Her research background is in Neuroscience. "]
]
